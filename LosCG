local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local Window = Library:CreateWindow({
    Title = "Kryptux Legends Of Speed",
    Icon = 95816097006870,
    Footer = "v1.0",
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    ChangeLogs = Window:AddTab("ChangeLogs", "file-text"),
    Collect = Window:AddTab("Collect", "download-cloud"),
    Rebirth = Window:AddTab("Rebirth", "refresh-ccw"),
    Teleport = Window:AddTab("Teleport", "navigation"),
}

-- ChangeLogs content
local ChangeLogsGroup = Tabs.ChangeLogs:AddLeftGroupbox("Change Logs")
ChangeLogsGroup:AddLabel("• Auto Collect Orbs\n• Auto Collect Gems\n• One-Click Rebirth\n• Advanced Teleport System\n• Modern UI Design")

-- Collect tab toggles
local CollectGroup = Tabs.Collect:AddLeftGroupbox("Collector")
local collectingOrbs = false
local collectingGems = false

CollectGroup:AddToggle("CollectOrbs", {
    Text = "Collect Orbs",
    Default = false,
    Callback = function(value)
        collectingOrbs = value
        if value then
            spawn(function()
                while collectingOrbs do
                    local success, err = pcall(function()
                        local remote = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents")
                        if remote then
                            local orbEvent = remote:FindFirstChild("orbEvent")
                            if orbEvent then
                                local orbColors = { "Red Orb", "Blue Orb", "Yellow Orb" }
                                for _, color in ipairs(orbColors) do
                                    orbEvent:FireServer("collectOrb", color, "City")
                                    task.wait(0.001)
                                end
                            end
                        end
                    end)
                    if not success then
                        Library:Notify({ Title = "Error", Description = err, Time = 3 })
                        break
                    end
                    task.wait(0.01)
                end
            end)
        end
    end,
})

CollectGroup:AddToggle("CollectGems", {
    Text = "Collect Gem",
    Default = false,
    Callback = function(value)
        collectingGems = value
        if value then
            spawn(function()
                while collectingGems do
                    local success, err = pcall(function()
                        local remote = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents")
                        if remote then
                            local orbEvent = remote:FindFirstChild("orbEvent")
                            if orbEvent then
                                orbEvent:FireServer("collectOrb", "Gem", "City")
                            end
                        end
                    end)
                    if not success then
                        Library:Notify({ Title = "Error", Description = err, Time = 3 })
                        break
                    end
                    task.wait(0.01)
                end
            end)
        end
    end,
})

-- Rebirth tab button
local RebirthGroup = Tabs.Rebirth:AddLeftGroupbox("Rebirth")
RebirthGroup:AddButton({
    Text = "Rebirth Now",
    Func = function()
        pcall(function()
            local remote = game:GetService("ReplicatedStorage"):FindFirstChild("rEvents")
            if remote then
                local rebirthEvent = remote:FindFirstChild("rebirthEvent")
                if rebirthEvent then
                    rebirthEvent:FireServer("rebirthRequest")
                    Library:Notify({ Title = "Rebirth", Description = "Rebirth request sent!", Time = 3 })
                end
            end
        end)
    end,
})

-- Teleport tab location selector and teleport button
local TeleportGroup = Tabs.Teleport:AddLeftGroupbox("Teleport")

local locations = {
    ["Mysterious Cave"] = Vector3.new(-9683.05, 59.31, 3136.63),
    ["City"] = Vector3.new(-186.8, 4.13, -125.2),
    ["Frost Course"] = Vector3.new(2022.68, 0.93, 984.48),
    ["Parkour Challenge"] = Vector3.new(1414.31, 34.57, -2058.34),
}

TeleportGroup:AddDropdown("LocationDropdown", {
    Values = { "Mysterious Cave", "City", "Frost Course", "Parkour Challenge" },
    Default = 2,
    Text = "Select Location",
})

TeleportGroup:AddButton({
    Text = "Teleport Now",
    Func = function()
        local selectedLocation = Library.Options.LocationDropdown.Value
        if locations[selectedLocation] then
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(locations[selectedLocation])
                Library:Notify({ Title = "Teleport", Description = "Teleported to "..selectedLocation, Time = 3 })
            end
        end
    end,
})

return Library
